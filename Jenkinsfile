/* groovylint-disable LineLength, CompileStatic, DuplicateStringLiteral */
pipeline {
  agent {
    kubernetes {
      defaultContainer 'rust-builder'
      idleMinutes 10
      yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    label: rust-builder
spec:
  initContainers:
    - name: docker-setup
      image: artifactory.ci.gitops.1keyes.net/te-docker-release/te-rust-musl-builder:latest
      command: ["cp", "-v", "/root/docker-config/config.json", "/root/.docker/"]
      volumeMounts:
      - name: dockerconfig
        mountPath: /root/.docker
      - name: dockerconfig-secret
        mountPath: /root/docker-config
  containers:
    - name: rust-builder
      image: artifactory.ci.gitops.1keyes.net/te-docker-release/te-rust-musl-builder:latest
      command:
        - cat
      tty: true
      env:
        - name: DOCKER_HOST
          value: tcp://127.0.0.1:2375
      volumeMounts:
        - name: dockerconfig
          mountPath: /root/.docker
    - name: dind
      image: docker:24-dind
      args: ["dockerd", "-H tcp://localhost:2375"]
      securityContext:
        privileged: true
      volumeMounts:
        - name: dind-storage
          mountPath: /var/lib/docker
  volumes:
    - name: dind-storage
      emptyDir: {}
    - name: dockerconfig
      emptyDir: {}
    - name: dockerconfig-secret
      secret:
        secretName: jenkins-te-docker-reg
'''
    }
  }

  environment {
    IMAGE_REPO = 'kubernetes-event-stream'
    PKG_VER = sh(script: 'echo $(grep ^version Cargo.toml | cut -d= -f2 | tr -d "[:blank:]" | tr -d \\")', returnStdout: true).trim()
    GIT_COMMIT = sh(script: 'git config --global --add safe.directory \'*\'; git rev-parse --short=8 HEAD', returnStdout: true).trim()
    BUILD_DATE = sh(script: 'date -u +%Y%m%d', returnStdout: true).trim()
    IMAGE_TAG = "${PKG_VER}-${GIT_COMMIT}-${BUILD_DATE}"
  }

  stages {
    stage('Test & Lint') {
      steps {
        sh 'cargo fmt --all -- --check'
        // Does not work yet, as the format generated by cargo sonar is newer and our sonar is old :/
        // sh '(cargo audit --json > audit.json) || true'
        // sh 'cargo sonar --audit || true'
        sh 'cargo audit || true'
        sh 'cargo clippy -- --no-deps -D warnings'
        sh 'cargo llvm-cov --cobertura --output-path coverage.xml nextest'
      }
    }

    stage('Build') {
      environment {
        DOCKER_OCI_LABEL_FLAGS = "--label org.opencontainers.image.authors=${CHANGE_AUTHOR} " +
                                 "--label org.opencontainers.image.revision=${GIT_COMMIT} " +
                                 "--label org.opencontainers.image.source=${GIT_URL}"
      }
      steps {
        sh "DOCKER_BUILDKIT=1 docker build --rm --platform linux/amd64 -t ${IMAGE_REPO}:${IMAGE_TAG} -t ${IMAGE_REPO}:latest -f Dockerfile ${DOCKER_OCI_LABEL_FLAGS} ."
      }
    }

    stage('Integration Test') {
      steps {
        // Run the tests with acceess to GH credentials since we pull k8s manifests and python libraries from our private repos.
        withCredentials([gitUsernamePassword(credentialsId: 'te-github-creds', gitToolName: 'git-tool')]) {
          sh 'git config --global --add url."https://github.com/".insteadOf "git@github.com:"'
          sh 'apt update -y && apt install -y python3-pip || true'
          sh 'pip3 install git+https://github.com/thousandeyes/integ-test-cluster.git'
          sh 'pytest -v --junitxml=target/nextest/default/junit-integtest.xml'
        }
      }
    }

    stage('Sonar Scanner (PR)') {
      when {
        changeRequest()
      }
      steps {
        sh 'docker run --rm -e SONAR_HOST_URL="http://sonar-sonarqube.ci:9000"' +
                      " -e SONAR_SCANNER_OPTS=\"-Dsonar.pullrequest.key=${CHANGE_ID} -Dsonar.pullrequest.base=${CHANGE_TARGET} -Dsonar.pullrequest.branch=${CHANGE_BRANCH} \"" +
                      " -v \"${WORKSPACE}:/usr/src\" artifactory.thousandeyes.com/docker-hub/sonarsource/sonar-scanner-cli"
      }
    }

    stage('Sonar Scanner') {
      when {
        anyOf {
          buildingTag()
          branch 'master'
        }
      }
      steps {
        sh 'docker run --rm -e SONAR_HOST_URL="http://sonar-sonarqube.ci:9000"' +
                      " -v \"${WORKSPACE}:/usr/src\" artifactory.thousandeyes.com/docker-hub/sonarsource/sonar-scanner-cli"
      }
    }

    stage('Publish') {
      when {
        anyOf {
          buildingTag()
          branch 'master'
        }
      }
      steps {
        sh "docker tag ${IMAGE_REPO}:${IMAGE_TAG} ${TE_DOCKER_REGISTRY_PROD}/${IMAGE_REPO}:${IMAGE_TAG}"
        sh "docker push ${TE_DOCKER_REGISTRY_PROD}/${IMAGE_REPO}:${IMAGE_TAG}"
        sh 'curl https://us.sentry.io/api/hooks/release/builtin/4507148507676672/bd8d0210184e0198c115af1fbaec7b639814c18b1fbd0c83fc7eef41ad7d89ac/' +
                ' -X POST -H \'Content-Type: application/json\'' +
                " -d '{\"version\": \"${IMAGE_REPO}@${PKG_VER}+${GIT_COMMIT}\"}'"
      }
    }
  }

  // Disable this until we have some tests
  post {
    always {
      junit 'target/nextest/default/junit*.xml'
    }
  }

  options {
      timeout(time: 90, unit: 'MINUTES')
      preserveStashes(buildCount: 3)
  }
}
